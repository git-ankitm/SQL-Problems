Question: Write a solution to find all dates' id with higher temperatures compared to its previous dates (yesterday).

Return the result table in any order.
Weather table:
+----+------------+-------------+
| id | recordDate | temperature |
+----+------------+-------------+
| 1  | 2015-01-01 | 10          |
| 2  | 2015-01-02 | 25          |
| 3  | 2015-01-03 | 20          |
| 4  | 2015-01-04 | 30          |
+----+------------+-------------+
Output: 
+----+
| id |
+----+
| 2  |
| 4  |
+----+
Explanation: 
In 2015-01-02, the temperature was higher than the previous day (10 -> 25).
In 2015-01-04, the temperature was higher than the previous day (20 -> 30).

Approach 1: Using DATEDIFF (Assumes Continuous Dates)
SELECT w1.id 
FROM Weather w1
JOIN Weather w2 
  ON DATEDIFF(w1.recordDate, w2.recordDate) = 1
WHERE w1.temperature > w2.temperature;

The above approach would not work if there are gaps in the recordDate column, as the JOIN clause requires a continuous range of dates. The DATEDIFF function calculates the difference in days between two dates, 
so the JOIN clause only retrieves the rows where the difference between w1.recordDate and w2.recordDate is exactly 1 day.

If there are gaps in the recordDate column, this approach would not retrieve the correct results, as it assumes that there is a continuous range of dates. To handle gaps in the data, 
you would need to modify the query to check for missing dates and handle them accordingly.

Approach 2: Using LAG() (Handles Missing Dates)
SELECT date_id, temperature
FROM (
  SELECT date_id, temperature,
         LEAD(temperature) OVER (ORDER BY date_id) AS next_temp
  FROM temperatures
) sub
WHERE temperature > next_temp;

The above solution assumes that the date_id column has a chronological order and represents a continuous range of dates. If the dates are not continuous, you'll need to handle gaps in the data 
accordingly as mentioned in query below

Approach 3: Using LAG() with null for More Robust Handling
WITH temp_rows AS (
  SELECT date_id, temperature,
         LAG(temperature) OVER (ORDER BY date_id) AS prev_temp,
         LEAD(temperature) OVER (ORDER BY date_id) AS next_temp
  FROM temperatures
)
SELECT date_id, temperature
FROM temp_rows
WHERE (prev_temp IS NULL OR temperature > prev_temp)
  AND (next_temp IS NULL OR temperature >= next_temp);

This query will correctly handle gaps in the data and return the date_id and temperature values for all dates with higher temperatures compared to either the previous or the next day, 
even when the dates are not continuous, as it able to handle gaps in the data.
